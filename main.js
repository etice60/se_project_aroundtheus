!function(){"use strict";var t=class{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._form=e,this._inputEls=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_disabledButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enabledButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_showInputError(t,e){const s=this._form.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),s.textContent=t.validationMessage,s.classList.add(this._errorClass)}_hideInputError(t){const e=this._form.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}toggleButtonState(){if(this._hasInvalidInput(this._inputEls))return this._submitButton.classList.add(this._inactiveButtonClass),void(this._submitButton.disabled=!0);this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_checkInputValidity(t){if(!t.validity.valid)return this._showInputError(t);this._hideInputError(t)}_hasInvalidInput(){return this._inputEls.some((t=>!t.validity.valid))}resetValidation(){this.toggleButtonState(),this._inputEls.forEach((t=>{this._hideInputError(t)}))}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((t=>{t.addEventListener("input",(e=>{this._checkInputValidity(t),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}},e=class{constructor(t){let{popupSelector:e}=t;this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._popupElementCloseBtn=this._popupElement.querySelector(".modal__close")}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(t=>{(t.target.classList.contains("modal_is-opened")||t.target.classList.contains("modal__close"))&&this.close()})),this._popupElementCloseBtn.addEventListener("click",(()=>{this.close()}))}open(){this._popupElement.classList.add("modal_is-opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_is-opened"),document.removeEventListener("keyup",this._handleEscClose)}},s=class extends e{constructor(t,e){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=e,this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const t=this._popupForm.querySelectorAll(".modal__input"),e={};return t.forEach((t=>e[t.name]=t.value)),console.log(e),e}setButtonText(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";t?this._submitButton.textContent=e:this._submitButton.text}setEventListeners(){this._popupElement.addEventListener("submit",(()=>{this._data=this._getInputValues(),this._handleFormSubmit(this._data),this.close()})),super.setEventListeners()}close(){this._popupForm.reset(),super.close()}};const o=new class{constructor(t){let{baseUrl:e,authToken:s}=t;this._baseUrl=e,this._authToken=s}_checkResponse(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authToken}}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authToken}}).then(this._checkResponse)}editUserInfo(t){return console.log(t),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t.title,about:t.about})}).then(this._checkResponse)}editUserPhoto(t){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({avatar:t.avatar})}).then(this._checkResponse)}addCard(t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t.name,link:t.link})}).then(this._checkResponse)}deleteCard(t){return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then(this._checkResponse)}addCardLike(t){return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"PUT",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then(this._checkResponse)}removeCardLike(t){return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authToken:"1634fdcb-9403-4d55-a456-722f52658f70"}),r=(document.querySelector("#card-template").content.querySelector(".card"),document.querySelector(".card__list"),document.querySelector("#edit-modal")),i=(r.querySelector(".modal__button"),document.querySelector("#edit-avatar-modal")),n=document.querySelector("#add-card-modal"),a=r.querySelector(".modal__form"),l=n.querySelector(".modal__form"),c=document.querySelector("#card-image"),u=(document.querySelector(".modal__card-image-preview"),document.querySelector(".modal__title"),n.querySelector(".modal__button"),document.querySelector(".profile__avatar-button")),d=document.querySelector(".profile__image"),h=document.querySelector(".profile__edit-button"),_=r.querySelector("#modal-close-button"),m=(n.querySelector("#card-close-button"),document.querySelector(".profile__title")),p=document.querySelector(".profile__description"),b=document.querySelector(".profile__add-button");let v;c.querySelector(".modal__image-close-button"),document.querySelector("#edit-avatar-modal");const S=new class{constructor(t,e,s){this.name=t,this.about=e,this.avatar=s}getUserInfo(){return{about:this.about.textContent,name:this.name.textContent,avatar:this.avatar.src}}setUserInfo(t,e){this.name.textContent=t,this.about.textContent=e}setAvatar(t){this.avatar.src=t,this.avatar.alt=this.name.textContent}}(m,p,d),E=a.querySelector(".modal__input_type_name"),y=a.querySelector(".modal__input_type_description"),k=(l.querySelector(".modal__input_type_title"),l.querySelector(".modal__input_type_url"),{inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"}),C=r.querySelector(".modal__form"),L=n.querySelector(".modal__form"),f=new s("#edit-avatar-modal",(t=>{f.setButtonText(!0),o.editUserPhoto(t).then((t=>{S.setAvatar(t.avatar),f.close()})).catch((t=>{console.error(t)})).finally((()=>f.setButtonText()))})),g=i.querySelector(".modal__form"),q=new s("#add-card-modal",(t=>(q.setButtonText(!0),o.addCard(t).then((t=>{console.log(t),w(t)})).catch((t=>{console.error(t)})))));q.setEventListeners();const B=new s("#edit-modal",(t=>(B.setButtonText(!0),o.editUserInfo(t).then((t=>{console.log(t),S.setUserInfo(t.name,t.about)})).catch((t=>{console.error(t)})))));B.setEventListeners(),f.setEventListeners();const T=new t(k,C),I=new t(k,L),x=new t(k,g);T.enableValidation(),I.enableValidation(),x.enableValidation(),Promise.all([o.getUserInfo(),o.getInitialCards()]).then((t=>{let[e,s]=t;S.setUserInfo(e.name,e.about),S.setAvatar(e.avatar),console.log(s),v=new class{constructor(t,e){let{renderer:s,items:o}=t;console.log(o),this._renderer=s,this._items=o,this._container=document.querySelector(e)}renderItems(){console.log(this._items),this._items.forEach(this._renderer)}addItem(t){this._container.prepend(t)}}({items:s,renderer:w},".card__list"),v.renderItems()})).catch((t=>{console.error(t)})),new class extends e{constructor(t){super({popupSelector:t}),this._popupImage=this._popupElement.querySelector(".modal__card-image-preview"),this._previewText=this._popupElement.querySelector(".modal__title")}open(t,e){this._popupImage.src=e,this._popupImage.alt=t,this._previewText.textContent=t,super.open()}}("#card-image").setEventListeners();const U=new class extends e{constructor(t,e){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent,this._handleFormSubmit=e}open(t){super.open(),this._cardData=t}close(){this._popupForm.reset(),super.close()}setButtonText(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=t?e:this._submitButtonText}setAction(t){this._handleFormSubmit=t}handleSubmit(t){t.preventDefault(),this._handleFormSubmit(this._cardData)}setEventListeners(){this._popupForm.addEventListener("submit",(t=>this.handleSubmit(t))),super.setEventListeners()}}("#delete-modal",(t=>{console.log("card",t)}));function w(t){const e=new class{constructor(t,e,s,o,r,i){let{name:n,link:a,_id:l}=t;this._name=n,this._link=a,this._cardSelector=e,this._handleCardClick=s,this._id=l,this._isLiked=i,this._handleDeleteClick=o,this._handleLikeClick=r}getId(){return this._id}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("mousedown",(()=>{this._handleLikeClick(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)}))}_renderLikes(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}setLikes(t){this._isLiked=t,this._renderLikes()}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_handleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}deleteCard(){this._handleDeleteCard()}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._renderLikes(),this._renderCard(),this._setEventListeners(),this._cardElement}_renderCard(){this._cardElement.querySelector(".card__title").innerText=this._name,this._cardElement.querySelector(".card__image").src=this._link,this._cardElement.querySelector(".card__image").alt=this._name}}(t,"#card-template",(()=>{}),(e=>{U.open(t),U.setAction((()=>{U.setButtonText(!0),o.deleteCard(e._id).then((()=>{console.log(e),e.deleteCard(),U.close()})).catch((t=>{console.error(t)})).finally((()=>{U.setButtonText(!1)}))}))}),(t=>{console.log(t._isLiked,t),t._isLiked?o.removeCardLike(t.getId()).then((()=>{t.setLikes(!1)})).catch((t=>{console.error(t)})):o.addCardLike(t.getId()).then((()=>{t.setLikes(!0)})).catch((t=>{console.error(t)}))}));v.addItem(e.getView())}U.setEventListeners(),h.addEventListener("click",(function(){!function(){const t=S.getUserInfo();E.value=t.name,y.value=t.about}(),B.open()})),_.addEventListener("click",(()=>B.close())),b.addEventListener("click",(()=>{I.toggleButtonState(),q.open()})),u.addEventListener("click",(()=>{x.toggleButtonState(),f.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
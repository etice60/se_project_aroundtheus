!function(){"use strict";var t=class{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._form=e,this._inputEls=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_disabledButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enabledButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_showInputError(t,e){const s=this._form.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),s.textContent=t.validationMessage,s.classList.add(this._errorClass)}_hideInputError(t){const e=this._form.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}toggleButtonState(){if(this._hasInvalidInput(this._inputEls))return this._submitButton.classList.add(this._inactiveButtonClass),void(this._submitButton.disabled=!0);this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_checkInputValidity(t){if(!t.validity.valid)return this._showInputError(t);this._hideInputError(t)}_hasInvalidInput(){return this._inputEls.some((t=>!t.validity.valid))}resetValidation(){this.toggleButtonState(),this._inputEls.forEach((t=>{this._hideInputError(t)}))}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((t=>{t.addEventListener("input",(e=>{this._checkInputValidity(t),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}},e=class{constructor(t){let{popupSelector:e}=t;this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._popupElementCloseBtn=this._popupElement.querySelector(".modal__close")}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(t=>{(t.target.classList.contains("modal_is-opened")||t.target.classList.contains("modal__close"))&&this.close()})),this._popupElementCloseBtn.addEventListener("click",(()=>{this.close()}))}open(){this._popupElement.classList.add("modal_is-opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_is-opened"),document.removeEventListener("keyup",this._handleEscClose)}},s=class extends e{constructor(t,e){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=e,this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const t=this._popupForm.querySelectorAll(".modal__input"),e={};return t.forEach((t=>e[t.name]=t.value)),console.log(e),e}setButtonText(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";t?this._submitButton.textContent=e:this._submitButton.text}setEventListeners(){this._popupElement.addEventListener("submit",(()=>{this._data=this._getInputValues(),this._handleFormSubmit(this._data),this.close()})),super.setEventListeners()}close(){this._popupForm.reset(),super.close()}};const o=new class{constructor(t){let{baseUrl:e,authToken:s}=t;this._baseUrl=e,this._authToken=s}_checkResponse(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authToken}}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authToken}}).then(this._checkResponse)}editUserInfo(t){return console.log(t),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t.title,about:t.about})}).then(this._checkResponse)}editUserPhoto(t){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({avatar:t.avatar})}).then(this._checkResponse)}addCard(t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t.name,link:t.link})}).then(this._checkResponse)}deleteCard(t){return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then(this._checkResponse)}addCardLike(t){return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"PUT",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then(this._checkResponse)}removeCardLike(t){return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authToken:"1634fdcb-9403-4d55-a456-722f52658f70"}),r=(document.querySelector("#card-template").content.querySelector(".card"),document.querySelector(".card__list"),document.querySelector("#edit-modal")),n=(r.querySelector(".modal__button"),document.querySelector("#add-card-modal")),i=r.querySelector(".modal__form"),a=n.querySelector(".modal__form"),l=document.querySelector("#card-image"),c=(document.querySelector(".modal__card-image-preview"),document.querySelector(".modal__title"),n.querySelector(".modal__button"),document.querySelector(".profile__avatar-button")),u=(document.querySelector(".profile__image"),document.querySelector(".profile__edit-button")),h=r.querySelector("#modal-close-button"),d=(n.querySelector("#card-close-button"),document.querySelector(".profile__title")),_=document.querySelector(".profile__description"),m=document.querySelector(".profile__add-button");let p;l.querySelector(".modal__image-close-button");const b=new class{constructor(t,e,s){this.name=t,this.about=e,this.avatar=s}getUserInfo(){return{about:this.about.textContent,name:this.name.textContent,avatar:this.avatar.src}}setUserInfo(t,e){this.name.textContent=t,this.about.textContent=e}setAvatar(t){this.avatar.src=t,this.avatar.alt=this.name.textContent}}(d,_),E=i.querySelector(".modal__input_type_name"),S=i.querySelector(".modal__input_type_description"),v=(a.querySelector(".modal__input_type_title"),a.querySelector(".modal__input_type_url"),{inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"}),y=r.querySelector(".modal__form"),C=n.querySelector(".modal__form"),f=new t(v,y),k=new t(v,C);f.enableValidation(),k.enableValidation();const g=new s("#add-card-modal",(t=>o.addCard(t).then((t=>{console.log(t),T(t)})).catch((t=>{console.error(t)}))));g.setEventListeners();const q=new s("#edit-modal",(t=>o.editUserInfo(t).then((t=>{console.log(t),b.setUserInfo(t.name,t.about)})).catch((t=>{console.error(t)}))));q.setEventListeners();const L=new s("#edit-avatar-modal",(t=>{L.setButtonText(!0),o.editUserPhoto(t).then((t=>{b.setAvatar(t.avatar),L.close()})).catch((t=>{console.error(t)})).finally((()=>L.setButtonText()))}));L.setEventListeners(),Promise.all([o.getUserInfo(),o.getInitialCards()]).then((t=>{let[e,s]=t;b.setUserInfo(e.name,e.about),console.log(s),p=new class{constructor(t,e){let{renderer:s,items:o}=t;console.log(o),this._renderer=s,this._items=o,this._container=document.querySelector(e)}renderItems(){console.log(this._items),this._items.forEach(this._renderer)}addItem(t){this._container.prepend(t)}}({items:s,renderer:T},".card__list"),p.renderItems()})).catch((t=>{console.error(t)})),new class extends e{constructor(t){super({popupSelector:t}),this._popupImage=this._popupElement.querySelector(".modal__card-image-preview"),this._previewText=this._popupElement.querySelector(".modal__title")}open(t,e){this._popupImage.src=e,this._popupImage.alt=t,this._previewText.textContent=t,super.open()}}("#card-image").setEventListeners();const B=new class extends e{constructor(t,e){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent,this._handleFormSubmit=e}open(t){super.open(),this._cardData=t}close(){this._popupForm.reset(),super.close()}setButtonText(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=t?e:this._submitButtonText}setAction(t){this._handleFormSubmit=t}handleSubmit(t){t.preventDefault(),this._handleFormSubmit(this._cardData)}setEventListeners(){this._popupForm.addEventListener("submit",(t=>this.handleSubmit(t))),super.setEventListeners()}}("#delete-modal",(t=>{console.log("card",t)}));function T(t){const e=new class{constructor(t,e,s,o,r){let{name:n,link:i,_id:a}=t;this._name=n,this._link=i,this._cardSelector=e,this._handleCardClick=s,this._id=a,this._handleDeleteClick=o,this._handleLikeClick=r}getId(){return this._id}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this.handleLikeClick(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)}))}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_handleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}deleteCard(){this._handleDeleteCard()}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._renderCard(),this._setEventListeners(),this._cardElement}_renderCard(){this._cardElement.querySelector(".card__title").innerText=this._name,this._cardElement.querySelector(".card__image").src=this._link,this._cardElement.querySelector(".card__image").alt=this._name}}(t,"#card-template",(()=>{}),(e=>{B.open(t),B.setAction((()=>{B.setButtonText(!0),o.deleteCard(e._id).then((()=>{console.log(e),e.deleteCard(),B.close()})).catch((t=>{console.error(t)})).finally((()=>{B.setButtonText(!1)}))}))}));p.addItem(e.getView())}B.setEventListeners(),u.addEventListener("click",(function(){!function(){const t=b.getUserInfo();E.value=t.name,S.value=t.about}(),q.open()})),h.addEventListener("click",(()=>q.close())),m.addEventListener("click",(()=>{k.toggleButtonState(),g.open()})),c.addEventListener("click",(()=>{k["avatar-form"].resetValidation(),L.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFDQ29CLEVBQWdCL0csS0FBS3NGLEdBQ3JCeUIsRUFBZ0JFLFdBQVUsS0FDeEJGLEVBQWdCL0YsZUFBYyxHQUM5QlMsRUFDRzhCLFdBQVdvQyxFQUFLK0IsS0FDaEJqRixNQUFLLEtBQ0ozQixRQUFRQyxJQUFJNEUsR0FDWkEsRUFBS3BDLGFBQ0x3RCxFQUFnQm5ILE9BQU8sSUFFeEI0RixPQUFPTSxJQUNOaEYsUUFBUTJFLE1BQU1LLEVBQUksSUFFbkJDLFNBQVEsS0FDUGdCLEVBQWdCL0YsZUFBYyxFQUFNLEdBQ3BDLEdBQ0osSUFHTnVELEVBQVltQyxRQUFRVyxFQUFRaUIsVUFDOUIsQ0E1QkF2QixFQUFnQmxILG9CQTBDaEJxRSxFQUFrQm5GLGlCQUFpQixTQU5uQyxZQU5BLFdBQ0UsTUFBTWtILEVBQVd6QixFQUFTOUIsY0FDMUJtQyxFQUFVaEUsTUFBUW9GLEVBQVNyRixLQUMzQmtFLEVBQVNqRSxNQUFRb0YsRUFBUy9DLEtBQzVCLENBR0V3RixHQUNBaEQsRUFBaUIxRixNQUNuQixJQUtBbUUsRUFBd0JwRixpQkFBaUIsU0FBUyxJQUNoRDJHLEVBQWlCOUYsVUFHbkIwRSxFQUFpQnZGLGlCQUFpQixTQUFTLEtBQ3pDb0csRUFBaUI5RyxvQkFDakIrRyxFQUFhcEYsTUFBTSxJQUdyQmlFLEVBQWFsRixpQkFBaUIsU0FBUyxLQUNyQ29HLEVBQWlCLGVBQWV4RyxrQkFDaENpSCxFQUFZNUYsTUFBTSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL2NvbnN0IGNhcmRJbWFnZU1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYXJkLWltYWdlXCIpO1xuLy9jb25zdCBjYXJkUHJldmlld0ltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY2FyZC1pbWFnZS1wcmV2aWV3XCIpO1xuLy9jb25zdCBjYXJkUHJldmlld1RpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fdGl0bGVcIik7XG4vL2NvbnN0IGNhcmRJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XG5cbmNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3RvcihcbiAgICB7IG5hbWUsIGxpbmssIF9pZCB9LFxuICAgIGNhcmRTZWxlY3RvcixcbiAgICBoYW5kbGVDYXJkQ2xpY2ssXG4gICAgaGFuZGxlRGVsZXRlQ2xpY2ssXG4gICAgaGFuZGxlTGlrZUNsaWNrXG4gICkge1xuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICAgIHRoaXMuX2xpbmsgPSBsaW5rO1xuICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XG4gICAgdGhpcy5faWQgPSBfaWQ7XG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sgPSBoYW5kbGVEZWxldGVDbGljaztcbiAgICB0aGlzLl9oYW5kbGVMaWtlQ2xpY2sgPSBoYW5kbGVMaWtlQ2xpY2s7XG4gIH1cblxuICBnZXRJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cblxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVMaWtlQ2xpY2sodGhpcyk7XG4gICAgICB9KTtcblxuICAgIHRoaXMuX2NhcmRFbGVtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGUtYnV0dG9uXCIpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sodGhpcyk7XG4gICAgICB9KTtcblxuICAgIHRoaXMuX2NhcmRFbGVtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIC8vdGhpcy5faGFuZGxlUHJldmlld1BpY3R1cmUoKTtcbiAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHRoaXMuX25hbWUsIHRoaXMuX2xpbmspO1xuICAgICAgfSk7XG4gIH1cblxuICBfaGFuZGxlRGVsZXRlQ2FyZCgpIHtcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IG51bGw7XG4gIH1cblxuICBfaGFuZGxlTGlrZUljb24oKSB7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpXG4gICAgICAuY2xhc3NMaXN0LnRvZ2dsZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcbiAgfVxuXG4gIGRlbGV0ZUNhcmQoKSB7XG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2FyZCgpO1xuICB9XG5cbiAgLy8gaGFuZGxlTW9kYWxEZWxldGVCdXR0b24oKSB7XG4gIC8vICAgdGhpcy5fbW9kYWxEZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgLy8gICAgIHRoaXMuX2NhcmRFbGVtZW50LnJlbW92ZSgpO1xuICAvLyAgIH0pO1xuICAvLyB9XG5cbiAgLy8gX2hhbmRsZVByZXZpZXdQaWN0dXJlKCkge1xuICAvLyAgIGNhcmRQcmV2aWV3SW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcbiAgLy8gICBjYXJkUHJldmlld0ltYWdlLmFsdCA9IHRoaXMuX25hbWU7XG4gIC8vICAgY2FyZFByZXZpZXdUaXRsZS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG4gIC8vICAgb3Blbk1vZGFsKGNhcmRJbWFnZU1vZGFsKTtcbiAgLy8gfVxuXG4gIGdldFZpZXcoKSB7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2FyZFNlbGVjdG9yKVxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xuICAgIHRoaXMuX3JlbmRlckNhcmQoKTtcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcbiAgfVxuICBfcmVuZGVyQ2FyZCgpIHtcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RpdGxlXCIpLmlubmVyVGV4dCA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKS5zcmMgPSB0aGlzLl9saW5rO1xuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIikuYWx0ID0gdGhpcy5fbmFtZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYXJkO1xuIiwiY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWwpIHtcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gc2V0dGluZ3MuaW5wdXRTZWxlY3RvcjtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IHNldHRpbmdzLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBzZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IHNldHRpbmdzLmlucHV0RXJyb3JDbGFzcztcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gc2V0dGluZ3MuZXJyb3JDbGFzcztcbiAgICB0aGlzLl9mb3JtID0gZm9ybUVsO1xuXG4gICAgdGhpcy5faW5wdXRFbHMgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXG4gICAgKTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuICB9XG5cbiAgX2Rpc2FibGVkQnV0dG9uKCkge1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gIH1cblxuICBfZW5hYmxlZEJ1dHRvbigpIHtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsLCBlcnJvck1lc3NhZ2UpIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbC5pZH0tZXJyb3JgKTtcbiAgICBpbnB1dEVsLmNsYXNzTGlzdC5hZGQodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcbiAgICBlcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IGlucHV0RWwudmFsaWRhdGlvbk1lc3NhZ2U7XG4gICAgZXJyb3JNZXNzYWdlRWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcbiAgfVxuXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKSB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlRWwgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0RWwuaWR9LWVycm9yYCk7XG4gICAgaW5wdXRFbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgZXJyb3JNZXNzYWdlRWwudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgIGVycm9yTWVzc2FnZUVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XG4gIH1cblxuICB0b2dnbGVCdXR0b25TdGF0ZSgpIHtcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KHRoaXMuX2lucHV0RWxzKSkge1xuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCkge1xuICAgIGlmICghaW5wdXRFbC52YWxpZGl0eS52YWxpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWwpO1xuICAgIH1cbiAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKTtcbiAgfVxuXG4gIF9oYXNJbnZhbGlkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0RWxzLnNvbWUoKGlucHV0RWwpID0+ICFpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKTtcbiAgfVxuXG4gIHJlc2V0VmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gICAgdGhpcy5faW5wdXRFbHMuZm9yRWFjaCgoaW5wdXRFbHMpID0+IHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxzKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9pbnB1dEVscyA9IFsuLi50aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcildO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XG5cbiAgICAvL3RoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgICB0aGlzLl9pbnB1dEVscy5mb3JFYWNoKChpbnB1dEVsKSA9PiB7XG4gICAgICBpbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCk7XG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybVZhbGlkYXRvcjtcbiIsImNsYXNzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yIH0pIHtcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gdGhpcy5faGFuZGxlRXNjQ2xvc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnRDbG9zZUJ0biA9XG4gICAgICB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY2xvc2VcIik7XG4gIH1cblxuICBfaGFuZGxlRXNjQ2xvc2UoZXZ0KSB7XG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldnQpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9pcy1vcGVuZWRcIikgfHxcbiAgICAgICAgZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9fY2xvc2VcIilcbiAgICAgICkge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLl9wb3B1cEVsZW1lbnRDbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgb3BlbigpIHtcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX2lzLW9wZW5lZFwiKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9pcy1vcGVuZWRcIik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQb3B1cDtcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5jbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xuICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0O1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19idXR0b25cIik7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uVGV4dCA9IHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudDtcbiAgfVxuXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICBjb25zdCBpbnB1dExpc3QgPSB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIik7XG4gICAgY29uc3QgZm9ybVZhbHVlcyA9IHt9O1xuXG4gICAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiAoZm9ybVZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlKSk7XG4gICAgY29uc29sZS5sb2coZm9ybVZhbHVlcyk7XG5cbiAgICByZXR1cm4gZm9ybVZhbHVlcztcbiAgfVxuXG4gIHNldEJ1dHRvblRleHQoc3VibWl0LCBidXR0b25UZXh0ID0gXCJTYXZpbmcuLi5cIikge1xuICAgIGlmIChzdWJtaXQpIHtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IGJ1dHRvblRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0O1xuICAgIH1cbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2RhdGEgPSB0aGlzLl9nZXRJbnB1dFZhbHVlcygpO1xuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9kYXRhKTtcblxuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuX3BvcHVwRm9ybS5yZXNldCgpO1xuICAgIHN1cGVyLmNsb3NlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9wdXBXaXRoRm9ybTtcbiIsImltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcbmltcG9ydCBcIi4uL3BhZ2VzL2luZGV4LmNzc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcbmltcG9ydCBQb3B1cCBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cC5qc1wiO1xuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcbmltcG9ydCBQb3B1cFdpdGhDb25maXJtYXRpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzXCI7XG5cbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxXCIsXG4gIGF1dGhUb2tlbjogXCIxNjM0ZmRjYi05NDAzLTRkNTUtYTQ1Ni03MjJmNTI2NThmNzBcIixcbn0pO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xuICB7XG4gICAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QveW9zZW1pdGUuanBnXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xha2UtbG91aXNlLmpwZ1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJCYWxkIE1vdW50YWluc1wiLFxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9iYWxkLW1vdW50YWlucy5qcGdcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiTGF0ZW1hclwiLFxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYXRlbWFyLmpwZ1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvdmFub2lzZS5qcGdcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiTGFnbyBkaSBCcmFpZXNcIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFnby5qcGdcIixcbiAgfSxcbl07XG5cbmV4cG9ydCBjb25zdCBjYXJkRGF0YSA9IHtcbiAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcbiAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiLFxufTtcblxuZXhwb3J0IGNvbnN0IGNhcmRUZW1wbGF0ZSA9IGRvY3VtZW50XG4gIC5xdWVyeVNlbGVjdG9yKFwiI2NhcmQtdGVtcGxhdGVcIilcbiAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpO1xuXG5leHBvcnQgY29uc3QgY2FyZExpc3RTZWxlY3RvciA9IFwiLmNhcmRfX2xpc3RcIjtcblxuLy8gV3JhcHBlcnNcbmNvbnN0IGNhcmRzV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlzdFwiKTtcbmNvbnN0IGVkaXRQcm9maWxlTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2VkaXQtbW9kYWxcIik7XG5jb25zdCBlZGl0UHJvZmlsZVN1Ym1pdEJ1dHRvbiA9XG4gIGVkaXRQcm9maWxlTW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xuY29uc3QgYWRkQ2FyZE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhZGQtY2FyZC1tb2RhbFwiKTtcbmNvbnN0IHByb2ZpbGVGb3JtRWxlbWVudCA9IGVkaXRQcm9maWxlTW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcbmNvbnN0IGFkZENhcmRGb3JtRWxlbWVudCA9IGFkZENhcmRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xuY29uc3QgY2FyZEltYWdlTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhcmQtaW1hZ2VcIik7XG5jb25zdCBjYXJkUHJldmlld0ltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY2FyZC1pbWFnZS1wcmV2aWV3XCIpO1xuY29uc3QgY2FyZFByZXZpZXdUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3RpdGxlXCIpO1xuY29uc3QgYWRkQ2FyZFN1Ym1pdEJ1dHRvbiA9IGFkZENhcmRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19idXR0b25cIik7XG5cbmNvbnN0IGF2YXRhckJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYXZhdGFyLWJ1dHRvblwiKTtcbmNvbnN0IGF2YXRhckltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZVwiKTtcblxuLy8gQnV0dG9ucyBhbmQgb3RoZXIgRE9NIE5vZGVzXG5jb25zdCBwcm9maWxlRWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdC1idXR0b25cIik7XG5jb25zdCBwcm9maWxlTW9kYWxDbG9zZUJ1dHRvbiA9IGVkaXRQcm9maWxlTW9kYWwucXVlcnlTZWxlY3RvcihcbiAgXCIjbW9kYWwtY2xvc2UtYnV0dG9uXCJcbik7XG5jb25zdCBhZGRDYXJkTW9kYWxDbG9zZUJ1dHRvbiA9XG4gIGFkZENhcmRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiI2NhcmQtY2xvc2UtYnV0dG9uXCIpO1xuY29uc3QgcHJvZmlsZVRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX190aXRsZVwiKTtcbmNvbnN0IHByb2ZpbGVEZXNjcmlwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIik7XG5jb25zdCBhZGROZXdDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpO1xuY29uc3QgY2FyZFByZXZpZXdDbG9zZUJ1dHRvbiA9IGNhcmRJbWFnZU1vZGFsLnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLm1vZGFsX19pbWFnZS1jbG9zZS1idXR0b25cIlxuKTtcblxuLy8gRm9ybSBEYXRhXG5sZXQgY2FyZFNlY3Rpb247XG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyhwcm9maWxlVGl0bGUsIHByb2ZpbGVEZXNjcmlwdGlvbik7XG5cbmNvbnN0IG5hbWVJbnB1dCA9IHByb2ZpbGVGb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbnB1dF90eXBlX25hbWVcIik7XG5jb25zdCBqb2JJbnB1dCA9IHByb2ZpbGVGb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5tb2RhbF9faW5wdXRfdHlwZV9kZXNjcmlwdGlvblwiXG4pO1xuXG5jb25zdCBjYXJkVGl0bGVJbnB1dCA9IGFkZENhcmRGb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5tb2RhbF9faW5wdXRfdHlwZV90aXRsZVwiXG4pO1xuXG5jb25zdCBjYXJkVXJsSW5wdXQgPSBhZGRDYXJkRm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW5wdXRfdHlwZV91cmxcIik7XG5cbmNvbnN0IGNhcmRTZWxlY3RvciA9IFwiI2NhcmQtdGVtcGxhdGVcIjtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qICAgICAgICAgVmFsaWRhdGlvbiAgICAgICAgICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5jb25zdCBzZXR0aW5ncyA9IHtcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uXCIsXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX2J1dHRvbl9kaXNhYmxlZFwiLFxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxufTtcblxuY29uc3QgZWRpdEZvcm1FbGVtZW50ID0gZWRpdFByb2ZpbGVNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xuY29uc3QgYWRkRm9ybUVsZW1lbnQgPSBhZGRDYXJkTW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qICAgICAgcG9wdXAgaXRlbXMgICAgICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5jb25zdCBlZGl0Rm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHNldHRpbmdzLCBlZGl0Rm9ybUVsZW1lbnQpO1xuY29uc3QgYWRkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHNldHRpbmdzLCBhZGRGb3JtRWxlbWVudCk7XG5cbmVkaXRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbmFkZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG5jb25zdCBhZGRDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNhZGQtY2FyZC1tb2RhbFwiLCAoY2FyZERhdGEpID0+IHtcbiAgcmV0dXJuIGFwaVxuICAgIC5hZGRDYXJkKGNhcmREYXRhKVxuICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICBjcmVhdGVDYXJkKHJlcyk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9KTtcbn0pO1xuYWRkQ2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmNvbnN0IGVkaXRQcm9maWxlUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNlZGl0LW1vZGFsXCIsIChjYXJkKSA9PiB7XG4gIHJldHVybiBhcGlcbiAgICAuZWRpdFVzZXJJbmZvKGNhcmQpXG4gICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHJlcy5uYW1lLCByZXMuYWJvdXQpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfSk7XG59KTtcbmVkaXRQcm9maWxlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uc3QgYXZhdGFyTW9kYWwgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNlZGl0LWF2YXRhci1tb2RhbFwiLCAoYXZhdGFyRGF0YSkgPT4ge1xuICBhdmF0YXJNb2RhbC5zZXRCdXR0b25UZXh0KHRydWUpO1xuICBhcGlcbiAgICAuZWRpdFVzZXJQaG90byhhdmF0YXJEYXRhKVxuICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICB1c2VySW5mby5zZXRBdmF0YXIoZGF0YS5hdmF0YXIpO1xuICAgICAgYXZhdGFyTW9kYWwuY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiBhdmF0YXJNb2RhbC5zZXRCdXR0b25UZXh0KCkpO1xufSk7XG5hdmF0YXJNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xuZGVidWdnZXI7XG5cblByb21pc2UuYWxsKFthcGkuZ2V0VXNlckluZm8oKSwgYXBpLmdldEluaXRpYWxDYXJkcygpXSlcbiAgLnRoZW4oKFt1c2VyRGF0YSwgY2FyZHNdKSA9PiB7XG4gICAgdXNlckluZm8uc2V0VXNlckluZm8odXNlckRhdGEubmFtZSwgdXNlckRhdGEuYWJvdXQpO1xuICAgIGNvbnNvbGUubG9nKGNhcmRzKTtcbiAgICBjYXJkU2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxuICAgICAge1xuICAgICAgICBpdGVtczogY2FyZHMsXG4gICAgICAgIHJlbmRlcmVyOiBjcmVhdGVDYXJkLFxuICAgICAgfSxcbiAgICAgIGNhcmRMaXN0U2VsZWN0b3JcbiAgICApO1xuICAgIGNhcmRTZWN0aW9uLnJlbmRlckl0ZW1zKCk7XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9KTtcblxuY29uc3QgaW1hZ2VQcmV2aWV3UG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIjY2FyZC1pbWFnZVwiKTtcbmltYWdlUHJldmlld1BvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmNvbnN0IGRlbGV0ZUNhcmRNb2RhbCA9IG5ldyBQb3B1cFdpdGhDb25maXJtYXRpb24oXCIjZGVsZXRlLW1vZGFsXCIsIChjYXJkKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwiY2FyZFwiLCBjYXJkKTtcbn0pO1xuZGVsZXRlQ2FyZE1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoY2FyZERhdGEpIHtcbiAgY29uc3QgbmV3Q2FyZCA9IG5ldyBDYXJkKFxuICAgIGNhcmREYXRhLFxuICAgIGNhcmRTZWxlY3RvcixcbiAgICAoKSA9PiB7fSxcbiAgICAoY2FyZCkgPT4ge1xuICAgICAgZGVsZXRlQ2FyZE1vZGFsLm9wZW4oY2FyZERhdGEpO1xuICAgICAgZGVsZXRlQ2FyZE1vZGFsLnNldEFjdGlvbigoKSA9PiB7XG4gICAgICAgIGRlbGV0ZUNhcmRNb2RhbC5zZXRCdXR0b25UZXh0KHRydWUpO1xuICAgICAgICBhcGlcbiAgICAgICAgICAuZGVsZXRlQ2FyZChjYXJkLl9pZClcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjYXJkKTtcbiAgICAgICAgICAgIGNhcmQuZGVsZXRlQ2FyZCgpO1xuICAgICAgICAgICAgZGVsZXRlQ2FyZE1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlQ2FyZE1vZGFsLnNldEJ1dHRvblRleHQoZmFsc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xuICBjYXJkU2VjdGlvbi5hZGRJdGVtKG5ld0NhcmQuZ2V0VmlldygpKTtcbn1cblxuZnVuY3Rpb24gZmlsbFByb2ZpbGVGb3JtKCkge1xuICBjb25zdCB1c2VyRGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XG4gIG5hbWVJbnB1dC52YWx1ZSA9IHVzZXJEYXRhLm5hbWU7XG4gIGpvYklucHV0LnZhbHVlID0gdXNlckRhdGEuYWJvdXQ7XG59XG5cbmZ1bmN0aW9uIG9wZW5Qcm9maWxlRm9ybSgpIHtcbiAgZmlsbFByb2ZpbGVGb3JtKCk7XG4gIGVkaXRQcm9maWxlUG9wdXAub3BlbigpO1xufVxuXG4vLyBFdmVudCBMaXN0ZW5lcnNcbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvcGVuUHJvZmlsZUZvcm0pO1xuXG5wcm9maWxlTW9kYWxDbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cbiAgZWRpdFByb2ZpbGVQb3B1cC5jbG9zZSgpXG4pO1xuXG5hZGROZXdDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGFkZEZvcm1WYWxpZGF0b3IudG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgYWRkQ2FyZFBvcHVwLm9wZW4oKTtcbn0pO1xuXG5hdmF0YXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgYWRkRm9ybVZhbGlkYXRvcltcImF2YXRhci1mb3JtXCJdLnJlc2V0VmFsaWRhdGlvbigpO1xuICBhdmF0YXJNb2RhbC5vcGVuKCk7XG59KTtcblxuLy9mdW5jdGlvbiByZW5kZXJDYXJkKGNhcmREYXRhLCB3cmFwcGVyKSB7XG4vL2NvbnN0IG5ld0NhcmQgPSBuZXcgQ2FyZChjYXJkRGF0YSwgY2FyZFNlbGVjdG9yLCBoYW5kbGVDYXJkQ2xpY2spO1xuLy9jYXJkU2VjdGlvbi5hZGRJdGVtKG5ld0NhcmQuZ2V0VmlldygpKTtcbi8vfVxuXG4vKmZ1bmN0aW9uIGhhbmRsZUNhcmRDbGljayhuYW1lLCBsaW5rKSB7XG4gIGltYWdlUHJldmlld1BvcHVwLm9wZW4obmFtZSwgbGluayk7XG59Ki9cblxuLypmdW5jdGlvbiBoYW5kbGVQcm9maWxlRm9ybVN1Ym1pdChkYXRhKSB7XG4gIHVzZXJJbmZvLnNldFVzZXJJbmZvKGRhdGEudGl0bGUsIGRhdGEuZGVzY3JpcHRpb24pO1xuICBlZGl0UHJvZmlsZVBvcHVwLmNsb3NlKCk7XG59Ki9cblxuLypmdW5jdGlvbiBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdChkYXRhKSB7XG4gIGNvbnN0IG5ld0NhcmQgPSBjcmVhdGVDYXJkKHsgbmFtZTogZGF0YS50aXRsZSwgbGluazogZGF0YS51cmwsIGRhdGEgfSk7XG4gIC8vIGNhcmRTZWN0aW9uLmFkZEl0ZW0obmV3Q2FyZCk7XG4gIGFkZENhcmRQb3B1cC5jbG9zZSgpO1xufSovXG5cbi8vIEZvcm0gTGlzdGVybmVyc1xuLy9wcm9maWxlRm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBoYW5kbGVQcm9maWxlRm9ybVN1Ym1pdCk7XG4vL2FkZENhcmRGb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGhhbmRsZUFkZENhcmRGb3JtU3VibWl0KTtcblxuLy9wcm9maWxlRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuLy9uYW1lSW5wdXQudmFsdWUgPSBwcm9maWxlVGl0bGUudGV4dENvbnRlbnQ7XG4vL2pvYklucHV0LnZhbHVlID0gcHJvZmlsZURlc2NyaXB0aW9uLnRleHRDb250ZW50O1xuLy90b2dnbGVCdXR0b25TdGF0ZShbbmFtZUlucHV0LCBqb2JJbnB1dF0sIGVkaXRQcm9maWxlU3VibWl0QnV0dG9uLCBjb25maWcpO1xuLy9vcGVuTW9kYWwoZWRpdFByb2ZpbGVNb2RhbCk7XG4vL30pO1xuXG4vL2FkZENhcmRNb2RhbENsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBhZGRDYXJkUG9wdXAuY2xvc2UoKSk7XG5cbi8vaW5pdGlhbENhcmRzLmZvckVhY2goKGNhcmREYXRhKSA9PiByZW5kZXJDYXJkKGNhcmREYXRhLCBjYXJkc1dyYXApKTtcblxuLypbZWRpdFByb2ZpbGVNb2RhbCwgYWRkQ2FyZE1vZGFsLCBjYXJkSW1hZ2VNb2RhbF0uZm9yRWFjaCgobW9kYWwpID0+IHtcbiptb2RhbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgaWYgKFxuICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsXCIpIHx8XG4gICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfX2Nsb3NlXCIpXG4gICAgKSB7XG4gICAgICBjbG9zZU1vZGFsKG1vZGFsKTtcbiAgICB9XG4gIH0pO1xufSk7Ki9cblxuLy9jYXJkU2VjdGlvbi5hZGRJdGVtKGNyZWF0ZUNhcmQoZGF0YSkpO1xuLy9ldnQucHJldmVudERlZmF1bHQoKTtcbi8vIGNvbnN0IG5hbWUgPSBjYXJkVGl0bGVJbnB1dC52YWx1ZTtcbi8vIGNvbnN0IGxpbmsgPSBjYXJkVXJsSW5wdXQudmFsdWU7XG4vLyByZW5kZXJDYXJkKHsgbmFtZSwgbGluayB9LCBjYXJkc1dyYXApO1xuLy9jbG9zZU1vZGFsKGFkZENhcmRNb2RhbCk7XG4vL2FkZENhcmRGb3JtRWxlbWVudC5yZXNldCgpO1xuLy90b2dnbGVCdXR0b25TdGF0ZShcbi8vIFtjYXJkVGl0bGVJbnB1dCwgY2FyZFVybElucHV0XSxcbi8vYWRkQ2FyZFN1Ym1pdEJ1dHRvbixcbi8vY29uZmlnXG4vLyk7XG4vL31cbiIsImNsYXNzIEFwaSB7XG4gIGNvbnN0cnVjdG9yKHsgYmFzZVVybCwgYXV0aFRva2VuIH0pIHtcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcbiAgICB0aGlzLl9hdXRoVG9rZW4gPSBhdXRoVG9rZW47XG4gIH1cblxuICBfY2hlY2tSZXNwb25zZShyZXMpIHtcbiAgICBpZiAocmVzLm9rKSB7XG4gICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdFVCBodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MS9jYXJkc1xuICBnZXRJbml0aWFsQ2FyZHMoKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRoVG9rZW4sXG4gICAgICB9LFxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gIH1cblxuICBnZXRVc2VySW5mbygpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhUb2tlbixcbiAgICAgIH0sXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgfVxuXG4gIGVkaXRVc2VySW5mbyhkYXRhKSB7XG4gICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhUb2tlbixcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lOiBkYXRhLnRpdGxlLFxuICAgICAgICBhYm91dDogZGF0YS5hYm91dCxcbiAgICAgIH0pLFxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gIH1cblxuICBlZGl0VXNlclBob3RvKGRhdGEpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhUb2tlbixcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBhdmF0YXI6IGRhdGEuYXZhdGFyLFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgfVxuXG4gIGFkZENhcmQoZGF0YSkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhUb2tlbixcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICAgIGxpbms6IGRhdGEubGluayxcbiAgICAgIH0pLFxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gIH1cblxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhUb2tlbixcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9LFxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gIH1cblxuICBhZGRDYXJkTGlrZShjYXJkSWQpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRoVG9rZW4sXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgfSxcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xuICB9XG5cbiAgcmVtb3ZlQ2FyZExpa2UoY2FyZElkKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fYXV0aFRva2VuLFxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIH0sXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcGk7XG4iLCJjbGFzcyBVc2VySW5mbyB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGFib3V0LCBhdmF0YXIpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuYWJvdXQgPSBhYm91dDtcbiAgICB0aGlzLmF2YXRhciA9IGF2YXRhcjtcbiAgfVxuXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhYm91dDogdGhpcy5hYm91dC50ZXh0Q29udGVudCxcbiAgICAgIG5hbWU6IHRoaXMubmFtZS50ZXh0Q29udGVudCxcbiAgICAgIGF2YXRhcjogdGhpcy5hdmF0YXIuc3JjLFxuICAgIH07XG4gIH1cblxuICBzZXRVc2VySW5mbyhuYW1lLCBhYm91dCkge1xuICAgIHRoaXMubmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgdGhpcy5hYm91dC50ZXh0Q29udGVudCA9IGFib3V0O1xuICB9XG5cbiAgc2V0QXZhdGFyKGF2YXRhcikge1xuICAgIHRoaXMuYXZhdGFyLnNyYyA9IGF2YXRhcjtcbiAgICB0aGlzLmF2YXRhci5hbHQgPSB0aGlzLm5hbWUudGV4dENvbnRlbnQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlckluZm87XG4iLCJjbGFzcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoeyByZW5kZXJlciwgaXRlbXMgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICBjb25zb2xlLmxvZyhpdGVtcyk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xuICB9XG5cbiAgcmVuZGVySXRlbXMoKSB7XG4gICAgY29uc29sZS5sb2codGhpcy5faXRlbXMpO1xuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2godGhpcy5fcmVuZGVyZXIpO1xuICB9XG5cbiAgYWRkSXRlbShlbGVtZW50KSB7XG4gICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VjdGlvbjtcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5jbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcbiAgICB0aGlzLl9wb3B1cEltYWdlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIi5tb2RhbF9fY2FyZC1pbWFnZS1wcmV2aWV3XCJcbiAgICApO1xuICAgIHRoaXMuX3ByZXZpZXdUZXh0ID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3RpdGxlXCIpO1xuICB9XG5cbiAgb3BlbihuYW1lLCBsaW5rKSB7XG4gICAgdGhpcy5fcG9wdXBJbWFnZS5zcmMgPSBsaW5rO1xuICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gbmFtZTtcbiAgICB0aGlzLl9wcmV2aWV3VGV4dC50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgc3VwZXIub3BlbigpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHVwV2l0aEltYWdlO1xuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmNsYXNzIFBvcHVwV2l0aENvbmZpcm1hdGlvbiBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCkge1xuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcbiAgICB0aGlzLl9wb3B1cEZvcm0gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblRleHQgPSB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQ7XG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XG4gIH1cblxuICBvcGVuKGNhcmREYXRhKSB7XG4gICAgc3VwZXIub3BlbigpO1xuICAgIHRoaXMuX2NhcmREYXRhID0gY2FyZERhdGE7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9wb3B1cEZvcm0ucmVzZXQoKTtcbiAgICBzdXBlci5jbG9zZSgpO1xuICB9XG5cbiAgc2V0QnV0dG9uVGV4dChzdWJtaXQsIGJ1dHRvblRleHQgPSBcIlNhdmluZy4uLlwiKSB7XG4gICAgaWYgKHN1Ym1pdCkge1xuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gYnV0dG9uVGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5fc3VibWl0QnV0dG9uVGV4dDtcbiAgICB9XG4gIH1cblxuICBzZXRBY3Rpb24oYWN0aW9uKSB7XG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGFjdGlvbjtcbiAgfVxuXG4gIGhhbmRsZVN1Ym1pdChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9jYXJkRGF0YSk7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZlbnQpID0+XG4gICAgICB0aGlzLmhhbmRsZVN1Ym1pdChldmVudClcbiAgICApO1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9wdXBXaXRoQ29uZmlybWF0aW9uO1xuIl0sIm5hbWVzIjpbImNvbnN0cnVjdG9yIiwic2V0dGluZ3MiLCJmb3JtRWwiLCJ0aGlzIiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2Zvcm0iLCJfaW5wdXRFbHMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiX3N1Ym1pdEJ1dHRvbiIsInF1ZXJ5U2VsZWN0b3IiLCJfZGlzYWJsZWRCdXR0b24iLCJjbGFzc0xpc3QiLCJhZGQiLCJkaXNhYmxlZCIsIl9lbmFibGVkQnV0dG9uIiwicmVtb3ZlIiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbCIsImVycm9yTWVzc2FnZSIsImVycm9yTWVzc2FnZUVsIiwiaWQiLCJ0ZXh0Q29udGVudCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hpZGVJbnB1dEVycm9yIiwidG9nZ2xlQnV0dG9uU3RhdGUiLCJfaGFzSW52YWxpZElucHV0IiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJzb21lIiwicmVzZXRWYWxpZGF0aW9uIiwiZm9yRWFjaCIsImlucHV0RWxzIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJlbmFibGVWYWxpZGF0aW9uIiwicHJldmVudERlZmF1bHQiLCJfcmVmIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cEVsZW1lbnQiLCJkb2N1bWVudCIsIl9oYW5kbGVFc2NDbG9zZSIsImJpbmQiLCJfcG9wdXBFbGVtZW50Q2xvc2VCdG4iLCJldnQiLCJrZXkiLCJjbG9zZSIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0IiwiY29udGFpbnMiLCJvcGVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlBvcHVwIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX3BvcHVwRm9ybSIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX3N1Ym1pdEJ1dHRvblRleHQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dExpc3QiLCJmb3JtVmFsdWVzIiwiaW5wdXQiLCJuYW1lIiwidmFsdWUiLCJjb25zb2xlIiwibG9nIiwic2V0QnV0dG9uVGV4dCIsInN1Ym1pdCIsImJ1dHRvblRleHQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJ0ZXh0IiwiX2RhdGEiLCJyZXNldCIsImFwaSIsImJhc2VVcmwiLCJhdXRoVG9rZW4iLCJfYmFzZVVybCIsIl9hdXRoVG9rZW4iLCJfY2hlY2tSZXNwb25zZSIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJnZXRJbml0aWFsQ2FyZHMiLCJmZXRjaCIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwidGhlbiIsImdldFVzZXJJbmZvIiwiZWRpdFVzZXJJbmZvIiwiZGF0YSIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwidGl0bGUiLCJhYm91dCIsImVkaXRVc2VyUGhvdG8iLCJhdmF0YXIiLCJhZGRDYXJkIiwibGluayIsImRlbGV0ZUNhcmQiLCJjYXJkSWQiLCJhZGRDYXJkTGlrZSIsInJlbW92ZUNhcmRMaWtlIiwiZWRpdFByb2ZpbGVNb2RhbCIsImNvbnRlbnQiLCJhZGRDYXJkTW9kYWwiLCJwcm9maWxlRm9ybUVsZW1lbnQiLCJhZGRDYXJkRm9ybUVsZW1lbnQiLCJjYXJkSW1hZ2VNb2RhbCIsImF2YXRhckJ1dHRvbiIsInByb2ZpbGVFZGl0QnV0dG9uIiwicHJvZmlsZU1vZGFsQ2xvc2VCdXR0b24iLCJwcm9maWxlVGl0bGUiLCJwcm9maWxlRGVzY3JpcHRpb24iLCJhZGROZXdDYXJkQnV0dG9uIiwiY2FyZFNlY3Rpb24iLCJ1c2VySW5mbyIsInNyYyIsInNldFVzZXJJbmZvIiwic2V0QXZhdGFyIiwiYWx0IiwibmFtZUlucHV0Iiwiam9iSW5wdXQiLCJlZGl0Rm9ybUVsZW1lbnQiLCJhZGRGb3JtRWxlbWVudCIsImVkaXRGb3JtVmFsaWRhdG9yIiwiRm9ybVZhbGlkYXRvciIsImFkZEZvcm1WYWxpZGF0b3IiLCJhZGRDYXJkUG9wdXAiLCJQb3B1cFdpdGhGb3JtIiwiY2FyZERhdGEiLCJjcmVhdGVDYXJkIiwiY2F0Y2giLCJlcnJvciIsImVkaXRQcm9maWxlUG9wdXAiLCJjYXJkIiwiYXZhdGFyTW9kYWwiLCJhdmF0YXJEYXRhIiwiZXJyIiwiZmluYWxseSIsImFsbCIsInVzZXJEYXRhIiwiY2FyZHMiLCJjb250YWluZXJTZWxlY3RvciIsInJlbmRlcmVyIiwiaXRlbXMiLCJfcmVuZGVyZXIiLCJfaXRlbXMiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJhZGRJdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJfcG9wdXBJbWFnZSIsIl9wcmV2aWV3VGV4dCIsImRlbGV0ZUNhcmRNb2RhbCIsIl9jYXJkRGF0YSIsInNldEFjdGlvbiIsImFjdGlvbiIsImhhbmRsZVN1Ym1pdCIsImV2ZW50IiwibmV3Q2FyZCIsImNhcmRTZWxlY3RvciIsImhhbmRsZUNhcmRDbGljayIsImhhbmRsZURlbGV0ZUNsaWNrIiwiaGFuZGxlTGlrZUNsaWNrIiwiX2lkIiwiX25hbWUiLCJfbGluayIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlQ2FyZENsaWNrIiwiX2hhbmRsZURlbGV0ZUNsaWNrIiwiX2hhbmRsZUxpa2VDbGljayIsImdldElkIiwiX2NhcmRFbGVtZW50IiwiX2hhbmRsZURlbGV0ZUNhcmQiLCJfaGFuZGxlTGlrZUljb24iLCJ0b2dnbGUiLCJnZXRWaWV3IiwiY2xvbmVOb2RlIiwiX3JlbmRlckNhcmQiLCJpbm5lclRleHQiLCJmaWxsUHJvZmlsZUZvcm0iXSwic291cmNlUm9vdCI6IiJ9